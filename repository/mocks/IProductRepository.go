// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "chap3-challenge2/model"

	mock "github.com/stretchr/testify/mock"
)

// IProductRepository is an autogenerated mock type for the IProductRepository type
type IProductRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: product
func (_m *IProductRepository) Add(product model.Product) (model.Product, error) {
	ret := _m.Called(product)

	var r0 model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Product) (model.Product, error)); ok {
		return rf(product)
	}
	if rf, ok := ret.Get(0).(func(model.Product) model.Product); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	if rf, ok := ret.Get(1).(func(model.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOne provides a mock function with given fields: deleteProduct, id
func (_m *IProductRepository) DeleteOne(deleteProduct model.Product, id string) error {
	ret := _m.Called(deleteProduct, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Product, string) error); ok {
		r0 = rf(deleteProduct, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *IProductRepository) Get() ([]model.Product, error) {
	ret := _m.Called()

	var r0 []model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserId provides a mock function with given fields: userId
func (_m *IProductRepository) GetByUserId(userId string) ([]model.Product, error) {
	ret := _m.Called(userId)

	var r0 []model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.Product, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) []model.Product); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: id
func (_m *IProductRepository) GetOne(id string) (model.Product, error) {
	ret := _m.Called(id)

	var r0 model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.Product, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) model.Product); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOne provides a mock function with given fields: updateProduct, id
func (_m *IProductRepository) UpdateOne(updateProduct model.Product, id string) (model.Product, error) {
	ret := _m.Called(updateProduct, id)

	var r0 model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Product, string) (model.Product, error)); ok {
		return rf(updateProduct, id)
	}
	if rf, ok := ret.Get(0).(func(model.Product, string) model.Product); ok {
		r0 = rf(updateProduct, id)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	if rf, ok := ret.Get(1).(func(model.Product, string) error); ok {
		r1 = rf(updateProduct, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIProductRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIProductRepository creates a new instance of IProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIProductRepository(t mockConstructorTestingTNewIProductRepository) *IProductRepository {
	mock := &IProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
